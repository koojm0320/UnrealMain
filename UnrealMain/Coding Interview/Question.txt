====================================================================================================
										- 코딩인터뷰 -
====================================================================================================

- 1일차 코딩인터뷰 -

01. 입사 동기 -> 왜 널 뽑아야 하는지? -> 어필?
ㄴ 사회적으로 - 팀원과의 협업, 기술적으로 - 어떤 기술을 사용할 수 있는지, 이걸 얼마나 활용할 수 있는지

저는 제 실력을 기반으로 회사와 팀에 기여하고, 지속적으로 성장하는 개발자가 되고 싶습니다.
저는 C++에서 포인터나 메모리 관리, STL 등 기초를 익혔고 이를 C++프로젝트에 적용시킨 바가 있습니다.
또한 문제가 발생했을 때 혼자 해결하려는 것보다, 팀원과 공유하고 함께 개선해 나가는 과정을 중요하게 생각합니다.


02. 성격의 장단점?
ㄴ 단점을 설명할 때 중의적 표현을 사용할 것

먼저 저는 저의 의견을 어필하는 능력이 살짝 부족하다고 생각합니다.
하지만 그만큼 상대방의 의견을 적극적으로 수렴하고 반영하는 능력이 있다고 생각하며,
이런 저의 성격이 팀 활동에서의 강점으로 다가올 것이라고 생각합니다.

03. 야근 여부와 의지?
ㄴ 긍정적인 의지를 보여줄 것

일을 하다보면 추가 근무는 불가피하다는 것을 잘 알고 있습니다.
추가 근무가 필요하다면 기꺼이 수행할 의지가 있습니다.


04. 객체지향 4대특징에 대해 설명해 보시오.
ㄴ C++언어는 객체지향 언어
ㄴ 캡슐화, 상속, 다형성, 추상화 - 설명할 때 부가설명을 할 것

먼저 캡슐화를 말씀드리자면 데이터와 그 데이터를 다루는 함수를 하나의 객체로 묶고,
외부에서는 인터페이스만 공개하는 개념입니다.
대표적으로 public, private, protected 같은 접근 지정자가 있습니다.
캡슐화를 사용하게 되면 유지보수성이 향상된다는 장점을 가지고 있습니다.
그 다음은 상속입니다.
상속은 기존에 있던 클래스를 기반으로 새로운 클래스를 만들어 자식과 부모의 관계를 형성하는 것입니다.
그 다음으로는 다형성인데요,
같은 인터페이스나 함수를 여러 형태의 동작을 할 수 있도록 만드는 개념입니다.
마지막으로는 추상화 입니다.
불필요한 세부 정보를 숨기고 필요한 기능을 외부에 제공하는 개념입니다.


05. 객체지향 5대 설계 원칙?
ㄴ S(단일 책임 원칙) O(개방 폐쇄 원칙) L(리스코프 치환의 법칙) I(인터페이스 분리의 원칙) D(의존관계 역전의 법칙) 

06. 컴퓨터를 구성하고 있는 하드웨어의 특징에 대해 설명하시오.
ㄴ CPU(기본 연산 처리 장치), GPU(그래픽 연산 처리 장치), RAM(휘발성 메모리 -> hdd, ssd에 저장)

07. 라이브러리와 프레임워크의 차이에 대해 알고 있는지?
ㄴ 정적 라이브러리(#include), 동적 라이브러리(#pragma ...)
ㄴ 프레임워크
ㄴ 관리의 주체의 차이점이 있다. 라는 것을 얘기하면 됨 (Stdafx, #include)

====================================================================================================

- 2일차 코딩인터뷰 -

08. 외국어 할 줄 아냐?
ㄴ 중의적으로 표현할 것, 할 수 있는 정도를 말하고 이걸 업무과 관련해서 대답을 마무리 지을 것.

09. 본인의 타입은 어떤 타입인가? 예시로 리더 / 부하 / 참모
ㄴ 그냥 평범하게 얘기해도 되지만 나의 성격이 반영된 신박한 이야기를 하는 것도 좋음

10. 현재 읽고 있는 전공책 있는지?
ㄴ 무턱대고 없다고 하지 말기. C/C++, 그래픽스DX, DP, 자료구조. 알고리즘, OS, 서버 에 대한 관련 책
ㄴ Effective C++, 그래픽스(용책(9), 해골책(10), 물방울책(11), 노을책(12)), OS(공룡책)

11. C/C++ 차이점에 대해
ㄴ 저수준 절차지향, 고수준 객체지향, 컴파일러의 존재 유무
ㄴ 제네릭 프로그래밍 가능 여부, 개발 기간 단축

12. C++ 왜 배워야 하는지?
ㄴ 다른 언어와의 차이점: 포인터(직접 메모리에 접근 가능 -> 최적화 가능), 객체지향
ㄴ 언리얼이 C++을 사용하기 때문에 -> 좋은 답변 X

====================================================================================================

- 3일차 코딩인터뷰 -

====================================================================================================

- 4일차 코딩인터뷰 -


13. 모두 퇴근하고 혼자 남았을 때 문제점을 발견했다. -> 어떻게 해결할 것인지?
ㄴ 혼자 해보려고 한다 -> X, 다음 날 -> X
ㄴ 라이브 서버를 관리하는 회사인 경우 문제가 발견한 시간 동안 손해가 발생하기 떄문에 어떤 시간일지라도 연락하는 것이 좋음

14. 학원 출결 / 집과의 거리 / 성실 관련 사례가 있다면 ?
ㄴ 집과의 거리: 자택과 학원의 거리 차이를 답하고 그 사이의 시간을 활용하여 프로그래밍 공부를 했다 ... 등등

15. 자료구조와 알고리즘에 대해 간략하게 설명해 보시오.
ㄴ 자료구조: 데이터를 담고 있는 컨테이너  /  알고리즘: 비보호 관련된 키워드 ..

16. A* 알고리즘 알고 있는지? ( -> 다이스트라) (Native)
ㄴ A* 알고리즘 : f(x) = g(x) + h(x)
ㄴ g(x) : 현재 상태 비용
ㄴ h(x) : 다음 상태로 이동할 때의 휴리스틱(추정 비용)
ㄴ 최소 비용으로 목표지점을 찾는다.
ㄴ 단점: 실시간 
ㄴ 점핑 포인트 서치
ㄴ 어떤 개념에 대한 정의는 장점과 단점이 있으니 찾기

17. Byte Odering 알고 있는지? (OS 질문)
ㄴ Byte 에 대한 명령을 수행하겠다 -> 정렬
ㄴ Big / Little
ㄴ Big 엔디언 : 가장 낮은 주소에 저장하는 방식		(음수 주소에 대한 정렬 속도가 빠름)
ㄴ Little 엔디언 : 가장 높은 주소에 저장하는 방식	(넢은 주소에 대한 정렬 속도가 빠름)
ㄴ ctrl + F5 컴파일, Unreal Play 버튼 같은 데에서 이미 사용하고 있었음

====================================================================================================

- 5일차 코딩인터뷰 -


18. 가장 재미있게 한 게임은 뭐가 있나요 ?
ㄴ 오버워치, 롤, 배그 - 게임의 완성도가 높은 게임을 이야기 하는 것이 좋음.
ㄴ 다양한 장르의 게임을 좋아한다는 것을 어필, 한 가지 장르만 이야기 하는 것은 좋지 않음
ㄴ 면접을 보는 회사의 게임을 이야기 하는 것이 좋음.
ㄴ 모바일, 인디, AAA급, 온라인 등 4가지의 유형으로 대답하기

19. 지원자가 생각하는 렌더링 엔진이란?
ㄴ 렌더링 엔진의 조건 ? - 파이프라인이 교체가 되는지, 특정 조건
ㄴ 파이프라인 + 에디터 = 언리얼 엔진
ㄴ 파이프라인에 관한 질문을 하면 파이프라인에 과정에 대해 물어볼 수 있음
ㄴ DX9 11의 차이: Programmable의 차이 -> 11은 프로그래머가 GPU에 관여할 수 있음.
ㄴ DX9 파이프라인, DX11 파이프라인 숙지

DX11 파이프라인
1. IA (Input Assembler)
2. VS (Vertax Shader)
3. Hull Shader
4. 테셀레이션
5. GS
6. 레스터라이져
7. PS (Pixel Shader)
8. OM (Out Merge)

20. 구조체와 클래스의 차이 ?
ㄴ 기본 접근 지정자의 차이 -> 구조체: public, 클래스: private
ㄴ 구조체가 public일 수 밖에 없는 이유? -> 확장성 때문
ㄴ struct는 . 접근
ㄴ 구조체화 클래스의 접근 방식
ㄴ 

21. 스택과 힙의 차이점 ?
ㄴ 스택: 속도가 빠름 LIFO의 구조, 함수 자체가 들어감
ㄴ 힙: 속도가 느림, 
ㄴ 스택의 크기 - 1mb, 힙의 크기 - 메모리8GB 기준 0.8GB를 뺀 7.2GB정도 사용 가능
ㄴ 파생 질문(stack): 스택에 들어간 레지스터
ㄴ 파생 질문(hip): 메모리 파편화 현상 -> iterator 사용하면 겪어볼 수 있음
ㄴ 힙은 프로그래머가 동적으로 할당할 수 있음, 스택은 컴파일러가 자동으로 할당시킴.

====================================================================================================

- 6일차 코딩인터뷰 - 

22. 챗 AI 플랫폼을 사용하는지? 사용했다면 어떻게? 왜 사용했는지
ㄴ 오류 수정 하는 데 사용하지 말기 XXX
ㄴ 코드를 완성하고 최적화 부분에서 사용했다 라는 대답이 나음.
ㄴ 쓰는 방향성에 맞게 참고용으로 사용할 것.
ㄴ 보조 수단

★★★ - 가장 기본적인 질문
23. V vs R (Value타입과 Reference타입) 설명 및 차이점
ㄴ V: 실제 값을 '복사'함, 복사값에 대한 정보라 실제 값에 영향이 가지 않음.
ㄴ R: 값의 주소를 '참조'함, 주소값에 대한 참조라 실제 값에 영향이 갈 수 있음, 스택에 정보 저장.

24. 문자열 회문 인지 테스트
ㄴ 손 코딩, 논리식을 확인하기 좋음 - 반복문

★★★ - C++에서 가장 기본적인 질문
25. 오버로딩 / 오버라이딩 개념 및 차이점
ㄴ 오버로딩: 함수의 이름이 같아도 매개변수가 다르면 컴파일러에서 다른 함수로 인식함.
ㄴ 오버라이딩: 상위 클래스가 가지고 있는 매서드를 하위 클래스에서 사용하기 위해 사용.
ㄴ 차이점:

26. 출근 가능일자?
ㄴ 바로 출근 가능하다 -> 너무 빡빡할 수 있음.
ㄴ 학원 얘기 -> 교육과정 진행 중에 있다고 하고 수료 하고 입사를 하겠다고 대답.
ㄴ 학원 수료 후 -> 역량 발휘를 위해 1-2주의 기간을 요하면 좋음.

====================================================================================================

- 7일차 코딩인터뷰 -

====================================================================================================

- 8일차 코딩인터뷰 -

27. 다중 상속 설명과 왜 주의해야 하는지
ㄴ 두 개 이상의 클래스를 상속, 상호 참조, 다이아몬드 구조

★★★ - 가산점 질문
28. 디자인 패턴에 대해서 아는지? 알고 있는거 나열해 보고 설명 -> 본인이 적용한 사례
ㄴ 싱글톤, 커맨드, 팩토리, 추상팩토리, 컴포지트, 메멘토
ㄴ 기본적인 개념 숙지
ㄴ 싱글톤을 사용했다는 것을 언급
ㄴ 보스 패턴 같은 경우 디자인 패턴을 사용함.
ㄴ 언리얼 엔진에서 컨텐츠 브라우저: 추상 팩토리
ㄴ 5개 6개 정도 기억하고 대답하면 좋을 것 같음

29. 당신을 왜 뽑아야 하나? 기술적 / 성격적으로 어필이 가능한지?
ㄴ 기술적:
ㄴ 성격적: 협업 능력, 근태 관련 장점 이야기 하기

30. 만약 본인 희망 연봉과 맞지 않는다면?
ㄴ 회사 입장으로 이야기

31. 보간의 개념과 종류에 대해 알고 있는지?
ㄴ 수치해석학, 언리얼에서 오브젝트의 이동을 부드럽게 하기 위해서 사용, A와 B의 사잇값을 예측
ㄴ 선형보간: 직선(lerp), 리니어, 인터포레이트
ㄴ 구면보간: 곡선(spline)
ㄴ 어디에 적용?

====================================================================================================

- 9일차 코딩인터뷰 -

32. 실제 면접 리뷰
{
회사명: 시프트업
이름: -
일자: -

회사 분위기 및 느낀점:
클라, 서버, 그리고 높으신거 같은 분 3명이서 3대 1 면접 진행

Q. 간단하게 자기 소개
ㄴ 못해도 1분 이상은 소개
ㄴ 

Q. 최적화 쪽을 해보고 싶었던건지
ㄴ

Q. 최적화 이슈가 있던 스팀 게임이 어떤 게임인지
ㄴ

(면접자는 이 질문에서 떨어짐)
Q. 서버와 클라이언트 차이가 뭐라고 생각하는지
ㄴ 제 생각에는 ...
ㄴ 서버는 중앙에서, 클라이언트는 사용자(유저)가 사용할 수 있도록 원격으로 서비스를 제공하는 것

(코테)
Q. 1번 문제는 넘어가고 2번 문제가 점수가 조금 안나왔는데 혹시 어떻게 풀려고 했는데 어떤 것이 안됐었는지
Q. 혹시 어떻게 해야 될 지 한번 더 생각 해봤는지
Q. 3번 문제에서 효율성만 통과가 안됐었는데 이건 어떤 문제가 있었을 거라고 생각했는지
Q. 3번 문제에서 부등호가 두 번 바뀌는 일이 있을지?
Q. 4번 문제 어떻게 풀었는지 설명해줄 수 있는지?

(이후 기술 면접 관련)
Q. 팀 포폴에서 다른 두 명은 어떤 부분을 구현했는지
Q. 협의는 원활하게 진행이 되었던건지
.
.
.

Q. IOCP란?
ㄴ

Q. 자료구조와 알고리즘은 얼마나 알고 있는지
ㄴ 

Q. 벡터와 리스트의 차이
ㄴ 

Q. 벡터가 리스트보다 좋은 점은
ㄴ 

Q. 맵을 사용해 봤는지
ㄴ 써봤다, 예시 - 언제 써봤는지
ㄴ 맵은 검색에 특화

Q. 맵 내부구조가 어떤 자료구조로 되어있는지 아는가
ㄴ 레드 블랙 트리

Q. 레드블랙트리의 장점
ㄴ 자동으로 정렬 - 리컬러링, 로테이션이랑 연계해서 대답
ㄴ 

Q. 언오더드맵을 아는지
ㄴ 

Q. 어떤 경우에 언오더드 맵을 사용해야 하는지
ㄴ 

Q. 소멸자에 virtual 키워드를 붙여야 하는 이유를 설명
ㄴ 

}

크래프톤 면접 질문 中
{
사용한 그래픽스 API
메모리 얼리케이터
스마트포인터
}

====================================================================================================

- 10일차 코딩인터뷰 -

33. 회사에서 근무하면서 본인의 업무 역량이 부족하다고 느껴질 때 본인은 어떻게 할 것인가?
ㄴ 회사에서 남아서 공부를 더 하겠다는 뉘앙스

★ 점수 따기 좋은 문항
34. 동료와 의견 차이가 발생할 때 어떻게 처리할 것인지 ?
ㄴ 관대하고 상대방을 배려하며 이해해주는 느낌
ㄴ 의견을 최대한 조율해 보고
ㄴ 누구의 편도 들지 말고 보고하는 것이 좋음.

★★★★★ 99% 나옴
35. 역질문 (마지막으로 회사에 궁금한 것 있는지?)
ㄴ 연봉 얼마인지 XXX, 복지가 어떤지 XX
ㄴ 팀 분위기나 주변 맛집 등 분위기를 풀어줄 수 있는 멘트
ㄴ 업무 관련 질문도 괜찮지만 너무 딱딱한 느낌을 줄 수도 있음.
ㄴ 본인의 부족한 점 (면접을 진행하면서 어떤 점이 부족했는 지, 보완할 점이 있는 지) Good

36. BP란? 장 / 단 -> BP로만 포트폴리오가 되어 있는데 이렇게 한 이유가 있는지?
ㄴ EX) 국자 - BP, 국자의 모양이나 길이 세부 정보 - C++ 스크립트
ㄴ BP 포트폴리오 -> 엔진을 적응하기 위한 하나의 방편이었음.

37. push_back vs emplace_back 설명
ㄴ 할당과 복사에 대한 이야기
ㄴ 공통점: 컨테이너의 크기가 늘어남, 컨테이너의 마지막에 요소를 추가
ㄴ 차이점
ㄴ push_back 이 들어가면 begin과 end를 확인하고 유효성 검사 (type 확인) 후  메모리 공간에 이슈가 없으면
	내가 넣으려는 값을 복사하고 메모리 공간을 확장하고 할당한다. 1번만 수행하면 됨.
ㄴ emplace_back은 string과 비슷한 결, 현재 들어가 있는 인덱스보다 컨테이너를 크게 잡아 놓고 새로 들어오면 들어온 만큼 크기를 늘린다.
ㄴ 입출력이 많을 때는 emplace_back, 더 효율적으로 메모리를 사용하고 싶을 때 push_back -> 퍼포먼스 이슈가 나타날 수 있음.

38. 전방선언 vs 전처리기문 차이점 (클래스)
ㄴ 전방선언: 이름값을 갖고 참조만 해주는 것임. (메모리 어딘가에 있다 라고 알려주기만 하기 때문에 제한적으로 기능 이용)
ㄴ 전처리기문(#include): 헤더나 cpp가 가지고 있는 기능 전체를 복사해서 가지고 온다.