#pragma region 1일차
/*
내일 오전 9시까지 제출

메일 제목: 언리얼 1기_API 세미 포트폴리오_이름

첨부파일: 본인이름.zip
ㄴ 1. 동영상.mp4
ㄴ 2. 소스코드.zip
ㄴ 3. 유튜브 링크 주소.txt

메일 내용: 유튜브 링크 (바로 확인 가능하게)

=============================================

언리얼 ver. 5.1.1

1. 스크립트 에디터 설치
ㄴ 주: VS 2022 / VS 2019
ㄴ 부: VS Code / NotePad++

수업: 2022, NotePad++

언리얼 5, 4 두개 다 씀

오늘부터 해야 할 것 -> 취업할 때까지

- 4신기

- 그래픽스 -> 수학 + 물리 -> 신입때는 크게 필요 X
- 플밍파트 -> 엔진 프로그래머

언리얼 5 핵심 키워드
- nanite
- lumen

▶ 그래픽스 API
- DX + metal
- OpenGL: 고수준 API (드라이버에서 많은 일을 처리하기 때문에 사용하기 쉬움)
- vulakn: 저수준 API (하드웨어에 직접적 접근이 가능하기 때문에 성능 최적화에 유리함.)
						ㄴ 드라이버에서 유효성 검사를 진행하지 않기 떄문에 BSOD나 커널패닉이 올 수 있음.

- 명령버퍼 기반 인터페이스: GPU에 대한 직접적인 제어 권한이 있음.
ㄴ cpu 연산량 ↓, 오버헤드 ↑

- 언리얼에서 이러한 빈도가 많이 발생 (BSOD, 커널패닉)

그래픽스가 신입에게 필요한가?
ㄴ 1. 신입이 소화하기 어려움.
ㄴ 2. 시장 상황을 고려했을 때 굳이?
ㄴ 3. 자체 엔진을 사용하는 거 아니면 굳이 필요 X

그렇다고 언리얼 쓰는데 그래픽스가 필요가 없진 않음.

그래픽스의 가장 큰 차이점 
- 좌표계가 다름
	ㄴ 왼손좌표계(DX) / 오른손좌표계(OpenGL)
	ㄴ Maya나 3DMax에도 영향을 받음
	ㄴ Transform: SRT / TRS로 분리됨
	ㄴ Scale Rotation Translate
	ㄴ 두 좌표계는 결과값이 완전 다름
	ㄴ 왼손 좌표계 : 중지가 모니터 안쪽으로
	ㄴ 오른손 좌표계: 중지가 모니터 바깥으로

	
- 렌파 (렌더링 파이프라인)
ㄴ 이해를 하는 게 베스트
ㄴ 자동차 공정 라인 생각
ㄴ SRP, URP, HDRP

DX 와 OpenGL 언급을 많이 하는 이유
- DX는 마이크로소프트에 종속적인 인터페이스이기 때문에, 
	다른 플랫폼에서 돌아가도록 OpenGL을 통해 호환성을 추가함

DX 파이프라인
- 9과 11
- fixed : 고정 / programmable : 동적
	 ㄴ 둘의 차이점: 프로그래머가 GPU에 관여할 수 있는지의 여부
1. 로컬 스페이스: (디자이너의 영역, (0, 0, 0)의 절대 좌표계) 렌더링 대상 객체의 정점 좌표
2. 월드 스페이스: SRT 순서로 처리되고 월드에서의 정점 좌표 (가상의 3D 공간)
3. 뷰 스페이스(카메라): 월드 좌표를 기준으로 카메라 배치
4. 백스페이스 컬링(후면 추려내기): 가상의 3D 공간에서의 후면을 추려내서 렌더링을 시키지 않음.
5. 조명: 최적화에서 중요함, 신입의 무덤 파트, 
		난반사 / 전반사, Point(점) / Directional(방향성), spot(주변광, 후레쉬) / ambiant(확산광, 가로등).
		Diffuse(난반사광), Specular(정반사광), Ambient(환경광), Emissive(자체발산광)
6. 클리핑
7. 프로젝션(투영) : 3D 장면에서 2D 표현으로 얻어오는 과정, 크게 2가지
					Perspective (원근투영) / Orsographic (직접투영)
					멀어지면 작게, 가까우면 크게 / 원래 크기 그대로
8. 뷰포트
9. 레스터라이즈(픽셀 보관) : 폴리곤 -> 픽셀로 변환



==================================
*/
#pragma endregion